import util.

main =>
  print("usage: picat toylang.pi SOURCEFILE").

main([Fname|_]) =>
  Source = read_file_chars(Fname),
  Output = execute(parse(tokenize(Source))),
  print_output(Output).

print_output([(I,V)|Os]) =>
  println(to_string(I) ++ " = " ++ to_string(V)),
  print_output(Os).
print_output([]) => true.

%
% intepreter
%
execute(As) = R =>
  execute(As,[],R).
execute([$assign(identifier(I),E)|As],Si,So) =>
  execute(As,set_var(Si,I,evaluate(E,Si)),So).
execute([],Si,So) => So = Si.

set_var([(I,_)|S],I,V) = [(I,V)|S].
set_var([(I,V)|S],I1,V1) = [(I,V)|set_var(S,I1,V1)].
set_var([],I1,V1) = [(I1,V1)].

get_var([(I,V)|_],I) = V.
get_var([(_,_)|S],I) = get_var(S,I).
get_var([],I) = nil => throw($runtime_error(uninitialized_variable(I))).

evaluate(literal(Token),S) = Token.
evaluate(identifier(Token),S) = get_var(S,Token).

evaluate(exp(A,nil),S) = evaluate(A,S).
evaluate(exp(A,B),S) = evaluate(A,S) + evaluate(B,S).
evaluate(exp_prime(add,A,nil),S) = + evaluate(A,S).
evaluate(exp_prime(sub,A,nil),S) = - evaluate(A,S).
evaluate(exp_prime(add,A,B),S) = + evaluate(A,S) + evaluate(B,S).
evaluate(exp_prime(sub,A,B),S) = - evaluate(A,S) + evaluate(B,S).

evaluate(term(A,nil),S) = evaluate(A,S).
evaluate(term(A,B),S) = evaluate(A,S) * evaluate(B,S).
evaluate(term_prime(mul,A,nil),S) = evaluate(A,S).
evaluate(term_prime(mul,A,B),S) = evaluate(A,S) * evaluate(B,S).

evaluate(uminus(E),S) = - evaluate(E,S).
evaluate(uplus(E),S) = + evaluate(E,S).

%
% parser
%
parse(Tokens) = R =>
  program(Tokens,[],R).

% Program:
% Assignment*
program(Si,So,Tree) =>
  assignments(Si,So,Tree).
assignments([],So,Tree) =>
  So = [],
  Tree = [].
assignments(Si,So,Tree) =>
  assignment(Si,S1,A),
  assignments(S1,So,As),
  Tree = [A|As].

expect(Info,S) ?=> true.
expect(Info,S) =>
  Err = to_atom("expecting " ++ to_string(Info)),
  throw($syntax_error(Err,(['<HERE>'|S]))).

% Assignment:
% Identifier = Exp;
assignment(L,So,Tree) =>
  expect(identifier,L),
  L = [$identifier(Token)|Si],
  expect(equals,L),
  Si = [equals|S1],
  expect(expression,L),
  exp(S1,S2,Tree1),
  expect(semicolon,L),
  S2 = [semicolon|So],
  Tree = $assign($identifier(Token),Tree1).

% Exp: 
% Exp + Term | Exp - Term | Term
%
% E -> T E'
exp(Si,So,Tree) =>
  expect(term,Si),
  term(Si,S1,Tree1),
  exp_prime(S1,So,Tree2),
  Tree = $exp(Tree1,Tree2).
% E' -> + T E' | - T E' | e
exp_prime([add|Si],So,Tree) =>
  expect(term,Si),
  term(Si,S1,Tree1),
  exp_prime(S1,So,Tree2),
  Tree = $exp_prime(add,Tree1,Tree2).
exp_prime([sub|Si],So,Tree) =>
  expect(term,Si),
  term(Si,S1,Tree1),
  exp_prime(S1,So,Tree2),
  Tree = $exp_prime(sub,Tree1,Tree2).
exp_prime(Si,So,Tree) => So = Si, Tree = nil.

% Term:
% Term * Fact  | Fact
%
% T -> F T'
term(Si,So,Tree) =>
  expect(factor,Si),
  fact(Si,S1,Tree1),
  term_prime(S1,So,Tree2),
  Tree = $term(Tree1,Tree2).
% T' -> * F T' | e
term_prime([mul|Si],So,Tree) =>
  expect(factor,Si),
  fact(Si,S1,Tree1),
  term_prime(S1,So,Tree2),
  Tree = $term_prime(mul,Tree1,Tree2).
term_prime(Si,So,Tree) => So = Si, Tree = nil.

% Fact:
% ( Exp ) | - Fact | + Fact | Literal | Identifier
fact([paren_open|Si],So,Tree) =>
  expect(expression,S1),
  exp(Si,S1,Tree),
  expect("closing parenthesis",S1),
  S1 = [paren_close|So].
fact([sub|Si],So,Tree) =>
  expect("factor",S1),
  fact(Si,So,Fact),
  Tree = $uminus(Fact).
fact([add|Si],So,Tree) =>
  expect("factor",S1),
  fact(Si,So,Fact),
  Tree = $uplus(Fact).
fact([literal(Token)|Si],So,Tree) =>
  Tree = $literal(Token),
  So = Si.
fact([identifier(Token)|Si],So,Tree) =>
  Tree = $identifier(Token),
  So = Si.

%
% tokenizer
%
tokenize([]) = [].
tokenize(['+'|T]) = [add|tokenize(T)].
tokenize(['-'|T]) = [sub|tokenize(T)].
tokenize(['*'|T]) = [mul|tokenize(T)].
tokenize([';'|T]) = [semicolon|tokenize(T)].
tokenize(['='|T]) = [equals|tokenize(T)].
tokenize(['('|T]) = [paren_open|tokenize(T)].
tokenize([')'|T]) = [paren_close|tokenize(T)].
tokenize([C|T]) = R, is_white_space(C) =>
  R = tokenize(T).
tokenize(L) = R, take_identifier(L,0,Take,Left), len(Take) > 0 =>
  Token = to_atom(Take),
  R = [$identifier(Token)|tokenize(Left)].
tokenize(L) = R, take_literal(L,0,Take,Left), len(Take) > 0 =>
  Token = to_number(Take),
  R = [$literal(Token)|tokenize(Left)].
tokenize([C|_]) = nil => throw($tokenizer_error(unexpected_character(C))).

% Identifier:
% Letter [Letter | Digit]*
take_identifier([],1,T,L) => T = [], L = [].
take_identifier([C|Str],State,T,L) ?=>
  (is_letter(C), Sym = sym_letter;
    is_digit(C), Sym = sym_digit),
  take_identifier_move(State,Sym,NextState),
  T = [C|T2],
  take_identifier(Str,NextState,T2,L).
take_identifier([C|Str],State,T,L) => T = [], L = [C|Str].
index (+,+,-)
take_identifier_move(0,sym_letter,1).
take_identifier_move(1,sym_letter,1).
take_identifier_move(1,sym_digit,1).

% 0 | NonZeroDigit Digit*
take_literal([],2,T,L) => T = [], L = [].
take_literal([],1,T,L) => T = [], L = [].
take_literal([C|Str],State,T,L) ?=>
  (is_none_zero_digit(C), Sym = digit_nzero;
    C == '0', Sym = digit_zero),
  take_literal_move(State,Sym,NextState),
  T = [C|T2],
  take_literal(Str,NextState,T2,L).
take_literal([C|Str],State,T,L) => T = [], L = [C|Str].
index (+,+,-)
take_literal_move(0,digit_zero,1).
take_literal_move(0,digit_nzero,2).
take_literal_move(2,digit_zero,2).
take_literal_move(2,digit_nzero,2).

is_none_zero_digit(C) => contains("123456789",C).
is_digit(C) => contains("0123456789",C).
is_letter(C) => contains("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_",C).

is_white_space(C) => contains(" \b\v\t\r\v\n",C).

contains([H|T],H) => true.
contains([H|T],C) => contains(T,C).
contains([],C) => false.
